[{"title":"gdb的基本使用","url":"https://kongzhou.net/2020/12/02/gdb的基本使用/","content":"<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><font color=#999AAA >学习对gdb的简单使用</font></p>\n<h1 id=\"一、gdb是什么？\"><a href=\"#一、gdb是什么？\" class=\"headerlink\" title=\"一、gdb是什么？\"></a>一、gdb是什么？</h1><p><font color=#999AAA >UNIX及UNIX-like下的调试工具</p>\n<h1 id=\"二、简单使用命令\"><a href=\"#二、简单使用命令\" class=\"headerlink\" title=\"二、简单使用命令\"></a>二、简单使用命令</h1><h2 id=\"1-运行run\"><a href=\"#1-运行run\" class=\"headerlink\" title=\"1.运行run\"></a>1.运行run</h2><p>两种运行方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r filename</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb //运行gdb</span><br><span class=\"line\">file filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-退出quit\"><a href=\"#2-退出quit\" class=\"headerlink\" title=\"2.退出quit\"></a>2.退出quit</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q //退出gdb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-设置删除断点break-delete\"><a href=\"#3-设置删除断点break-delete\" class=\"headerlink\" title=\"3.设置删除断点break/delete\"></a>3.设置删除断点break/delete</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b main //在main函数下断点</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b filename:9 //在第九行下断点</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d //删除全部断点</span><br><span class=\"line\">d number //删除指点断点</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-继续执行continue\"><a href=\"#4-继续执行continue\" class=\"headerlink\" title=\"4.继续执行continue\"></a>4.继续执行continue</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c <span class=\"comment\">//到达断点后继续执行</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-单步执行next\"><a href=\"#5-单步执行next\" class=\"headerlink\" title=\"5.单步执行next\"></a>5.单步执行next</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n //单步调试，C语言级</span><br><span class=\"line\">ni //针对汇编，汇编级</span><br><span class=\"line\">按enter可重复上一条指令</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-进入函数step\"><a href=\"#6-进入函数step\" class=\"headerlink\" title=\"6.进入函数step\"></a>6.进入函数step</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s //在单步执行时，遇到函数调用，可进入函数</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看代码list\"><a href=\"#7-查看代码list\" class=\"headerlink\" title=\"7.查看代码list\"></a>7.查看代码list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l //显示接下来执行的10行代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-查看变量值print\"><a href=\"#8-查看变量值print\" class=\"headerlink\" title=\"8.查看变量值print\"></a>8.查看变量值print</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p a //查看变量值</span><br><span class=\"line\">p main //查看main函数，是地址</span><br><span class=\"line\">p arr //查看数组</span><br><span class=\"line\">p arr[1] //查看数组中第1位</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-查看信息info\"><a href=\"#9-查看信息info\" class=\"headerlink\" title=\"9.查看信息info\"></a>9.查看信息info</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i b //查看断点</span><br><span class=\"line\">i r //查看寄存器</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-分窗口\"><a href=\"#10-分窗口\" class=\"headerlink\" title=\"10.分窗口\"></a>10.分窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl-x-a //转换TUI界面</span><br><span class=\"line\">ctrl-x-2 //打开的是汇编窗口</span><br></pre></td></tr></table></figure>\n\n\n","categories":["学习历程"],"tags":[]},{"title":"IDA简单使用","url":"https://kongzhou.net/2020/11/19/IDA简单使用/","content":"<h3 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h3><p>写这个是因为看了学长发的PPT，发现自己对IDA的许多功能并不是那么的熟悉，所以就把PPT上边的内容手打下来，加深印象，方便查看</p>\n<h3 id=\"0x01-IDA-Pro简介\"><a href=\"#0x01-IDA-Pro简介\" class=\"headerlink\" title=\"0x01 IDA Pro简介\"></a>0x01 IDA Pro简介</h3><p>•交互式反汇编器专业版（Interactive Disassembler Professional），人们常称其为IDA Pro，或简称为IDA。是目前最棒的一个静态反编译软件，为众多0day世界的成员和ShellCode安全分析人士不可缺少的利器！</p>\n<p>•IDA Pro是一款交互式的，可编程的，可扩展的，多处理器的，交叉Windows或Linux WinCE MacOS平台主机来分析程序， 被公认为最好的花钱可以买到的逆向工程利器。IDA Pro已经成为事实上的分析敌意代码的标准并让其自身迅速成为攻击研究领域的重要工具。它支持数十种CPU指令集其中包括Intel x86，x64，MIPS，PowerPC，ARM，Z80，68000，c8051等等。</p>\n<p>上面是百度对IDA的简介</p>\n<h3 id=\"0x02-IDA启动\"><a href=\"#0x02-IDA启动\" class=\"headerlink\" title=\"0x02 IDA启动\"></a>0x02 IDA启动</h3><p>• IDA负责反编译32位可执行文件，IDA64负责编译64位可执行文件<br>• 注意，分析文件时，必须把对应的文件放到对应的IDA中分析，否则会出现不能反编译的情况<br><img src=\"https://img-blog.csdnimg.cn/20201119151946532.png#pic_center\" alt=\"在这里插入图片描述\"><br>• IDA打开后如上图所示<br>• 其中<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•”New”选项表明反编译新的可执行文件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•”Go”选项表明直接进入主页面<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•”Previous”选项表明加载已反编译的文件选项</p>\n<h3 id=\"0x03-加载可执行文件\"><a href=\"#0x03-加载可执行文件\" class=\"headerlink\" title=\"0x03 加载可执行文件\"></a>0x03 加载可执行文件</h3><p><img src=\"https://img-blog.csdnimg.cn/20201119154432494.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>• 上图界面可识别当前加载的可执行文件类型，这里已识别出文件为EXE可执行文件格式<br>• 下面”Processor type”选项表明当前处理器类型，IDA能够识别的文件类型可依照IDA默认选项加载可执行文件，如果是IDA不能识别的二进制代码，例如ShellCode代码，可选择”Binary file”方式加载<br><img src=\"https://img-blog.csdnimg.cn/20201119155341700.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>• 一旦选择”Binary file”方式加载文件，则需要用户手动填入加载段地址和相对偏移，对应上图”Loading segment”和”Loading offset”选项。该种方式主要应用场景为：分析动态保存的二进制代码、ShellCode二进制代码分析等。<br>•  选择”Binary file”方式加载文件，IDA不会自动分析代码，用户需根据具体需求自行反汇编二进制代码</p>\n<h3 id=\"0x04-IDA主要功能界面\"><a href=\"#0x04-IDA主要功能界面\" class=\"headerlink\" title=\"0x04 IDA主要功能界面\"></a>0x04 IDA主要功能界面<img src=\"https://img-blog.csdnimg.cn/20201119173454910.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></h3><h3 id=\"0x05-IDA分析可执行文件\"><a href=\"#0x05-IDA分析可执行文件\" class=\"headerlink\" title=\"0x05 IDA分析可执行文件\"></a>0x05 IDA分析可执行文件</h3><p>• IDA会对可识别的文件进行代码反编译，反编译过程一句文件大小而定，例如：几百KB大小的文件，IDA可短时间分析完毕；几M或更大的文件，IDA则自动分析一段时间，越大的文件IDA分析的时间通常会越长(因为可执行文件越大，意味着可执行文件中代码段越大，IDA分析时间自然会更长)。<br>• 判断IDA分析完毕的方法有：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•下图IDA的”Output Window”窗口输出”The initial autoanalysis has been finished”日志时，则说明IDA已分析完毕，对应Log如下图所示<br><img src=\"https://img-blog.csdnimg.cn/20201119190428249.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•上图中IDA界面左下角AU处于”idie”状态时，也表明IDA分析完毕<br>• 通过以上方式可观察到IDA是否分析完毕。IDA分析完毕之后会将光标停留在需分析的可执行文件入口函数处。如下图分析程序，程序分析完毕之后，IDA把当前光标停留在下图main函数中。<br><img src=\"https://img-blog.csdnimg.cn/20201119191150114.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0x06-IDA功能界面介绍\"><a href=\"#0x06-IDA功能界面介绍\" class=\"headerlink\" title=\"0x06 IDA功能界面介绍\"></a>0x06 IDA功能界面介绍</h3><p>•  经过IDA的加载和分析过程，用户便可根据需求自行逆向分析。进行逆向分析之前需了解IDA界面有哪些功能，包括：导航条、反汇编窗口、其他辅助分析窗口。<br><img src=\"https://img-blog.csdnimg.cn/20201119193113163.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>• 导航栏<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• IDA主界面中存在一项颜色各异的导航条，导航条如下图<br><img src=\"https://img-blog.csdnimg.cn/20201119193641756.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 蓝色：表示常规的指令函数，绝大部分为用户编写的代码<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 黑色：表示间隙部分内容，可执行文件中包含多个节段<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 银白色：表示数据项部分内容，可执行文件中会包含大量数据<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 粉色：表示外部导入函数，通常可执行文件会导入外部的库函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 暗黄色：表示IDA未识别的内容，需要用户根据需求自行分析<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 有个青色，我搜的是库函数</p>\n<p>• 反汇编窗口(IDA View-A)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 反汇编窗口属于逆向分析过程中关注频率最高的窗口，通过此窗口可以逆向分析反汇编代码。对应下图<br><img src=\"https://img-blog.csdnimg.cn/20201119202614240.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>• 反汇编窗口可分为两种模式，分别为：默认模式和流程模式。（空格键转换）<br>• 默认模式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 反汇编窗口默认模式属于使用频率很高的常规模式，对应界面如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20201119203058740.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>•  图形模式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 反汇编窗口默认模式中按下键盘的”空格键”便转入图形模式，图形模式界面如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20201119203316696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>• 其他辅助分析窗口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 除了提供反汇编分析窗口，IDA默认界面提供<strong>二进制查看编辑窗口、函数窗口、结构窗口、枚举类型窗口、导入函数窗口、导出函数窗口</strong>。不同窗口在分析节段起到不同作用。下面介绍其他辅助分析窗口功能的应用场景。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 二进制窗口（Hex View-1）可支持用户查看可执行文件对应相对偏移的二进制机器码数据。如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201119205020314.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 二进制窗口总共为三部分，三部分内容分别位于下图左、中、右，三种含义分别为：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 左边数据：表示二进制数据对应的内存相对偏移<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 中间数据：表示内存中数据的具体内容<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 右边数据：表示内存数据的字符串显示，该功能可辅助读者快速识别字符串内容<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 用户可在二进制查看窗口编辑二进制数据，从而满足篡改数据的测试需求<br><img src=\"https://img-blog.csdnimg.cn/20201119205120820.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>• 函数窗口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• IDA提供函数窗口供用户查找函数信息，该窗口界面如图：<br><img src=\"https://img-blog.csdnimg.cn/20201119205931887.png#pic_center\" alt=\"在这里插入图片描述\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 在窗口按下”CTRL + F”快捷键便可根据需求搜索函数名，快速定位函数名方式可提高逆向分析效率</p>\n<p>• 结构窗口（Structures）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 结构窗口提供用户查询已定义的结构体，同时IDA可识别出可执行文件包含的部分结构体数据，结构窗口如下所示：<br><img src=\"https://img-blog.csdnimg.cn/2020111921035547.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 结构窗口可通过快捷键”+”、”-“展开和收缩结构体，IDA结构窗口支持用户自定义结构体</p>\n<p> • 导入函数窗口（Imports）<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• IDA提供导入函数窗口，用于可在导入函数窗口中查看当前可执行文件导入哪些外部函数库及函数，导入函数窗口如下图所示：<br> <img src=\"https://img-blog.csdnimg.cn/20201119210812369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>• 导出函数窗口（Exports）<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• IDA的导出函数窗口提供可执行文件导出函数信息，对应的带出函数窗口如下图所示：<br> <img src=\"https://img-blog.csdnimg.cn/20201119211056636.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1OTY2OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0x07-常用快捷键\"><a href=\"#0x07-常用快捷键\" class=\"headerlink\" title=\"0x07 常用快捷键\"></a>0x07 常用快捷键</h3><table border=\"1\">\n<tr>\n  <td>按键</td>\n  <td>用处</td>\n</tr>\n<tr>\n  <td>F5</td>\n  <td>将汇编转换成伪代码 </td>\n</tr>\n<tr>\n  <td>Shift + F12 </td>\n  <td>查看字符串 </td>\n</tr>\n<tr>\n  <td>X </td>\n  <td>查看交叉引用 </td>\n</tr>\n<tr>\n  <td>Y </td>\n  <td>修改变量类型 </td>\n</tr>\n<tr>\n  <td>H,R,A </td>\n  <td>转换数据类型 </td>\n</tr>\n<tr>\n  <td>C </td>\n  <td>转换为代码 </td>\n</tr>\n<tr>\n  <td>D </td>\n  <td>转换为数据 </td>\n</tr>\n<tr>\n  <td> </td>\n  <td> </td>\n</tr>\n</table>\n","categories":["学习历程"],"tags":[]},{"title":"一般术语解释(持续更新)","url":"https://kongzhou.net/2020/11/15/一般术语解释（持续更新）/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>看pwn入门视频，有许多属于不知道是什么意思，搜索记录一下</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><table border=\"1\">\n<tr>\n  <td>名称</td>\n  <td>解释</td>\n</tr>\n<tr>\n  <td>exp(Exploit) </td>\n  <td>漏洞利用，，一般是个demo(演示)程序</td>\n</tr>\n<tr>\n  <td>poc(Proof of Concept)</td>\n  <td>漏洞证明，一般是个样本，用来证明和复现</td>\n</tr>\n<tr>\n  <td>vul(Vulnerability)</td>\n  <td>泛指漏洞</td>\n</tr>\n<tr>\n  <td>shellcode</td>\n  <td>可提权代码（偷个小故事说明一下，缓冲区溢出攻击相当于一辆坦克，如果要攻破一座堡垒，那么总重要的是什么呢？就是炮弹，shellcode就相当于炮弹，没有打补丁的主机就相当于堡垒）</td>\n</tr>\n<tr>\n  <td>payload</td>\n  <td>有效供给负载，是包含在用于一次漏洞利用(exp)中的Shellcode的主要功能代码</td>\n</tr>\n<tr>\n  <td> </td>\n  <td> </td>\n</tr>\n<tr>\n  <td> </td>\n  <td> </td>\n</tr>\n<tr>\n  <td> </td>\n  <td> </td>\n</tr>\n</table>\n\n\n\n\n\n\n<p>参考：<a href=\"https://www.zhihu.com/question/26053378\">https://www.zhihu.com/question/26053378</a></p>\n","categories":["学习历程"],"tags":[]},{"title":"pwntools安装与简单使用（初学习持续更新）","url":"https://kongzhou.net/2020/11/15/pwntools安装与简单使用（初学习持续更新）/","content":"<p>小白一枚，初学轻喷</p>\n<h3 id=\"0x01-pwntools简介\"><a href=\"#0x01-pwntools简介\" class=\"headerlink\" title=\"0x01.pwntools简介\"></a>0x01.pwntools简介</h3><p>pwntools 是一款专门用于CTF Exploit的python库，能够很方便的进行本地与远程利用的切换，基本涵盖了pwn题利用脚本所需要的各种工具。</p>\n<h3 id=\"0x02-pwntools安装\"><a href=\"#0x02-pwntools安装\" class=\"headerlink\" title=\"0x02.pwntools安装\"></a>0x02.pwntools安装</h3><p>在Ubuntu中安装，这个是python2的，python3不能pip安装，还要安装其他东西，在这里就不详述了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install pwntools</span><br></pre></td></tr></table></figure>\n<h3 id=\"0x03-pwntools的常用模块\"><a href=\"#0x03-pwntools的常用模块\" class=\"headerlink\" title=\"0x03.pwntools的常用模块\"></a>0x03.pwntools的常用模块</h3><table border=\"1\">\n<tr>\n  <td>Pwnlib.asm</td>\n  <td>通过capstone进行汇编与反汇编，支持x86/x64/arm/mips/powerpc等基本上所有的主流平台</td>\n</tr>\n<tr>\n  <td>Pwnlib.dynelf</td>\n  <td>用于远程符号泄漏，通过leak数据来自动化定位程序中函数位置(极其实用)</td>\n</tr>\n<tr>\n  <td>Pwnlib.elf</td>\n  <td>对elf文件进行读写(实用方便)</td>\n</tr>\n<tr>\n  <td>Pwnlib.gdb</td>\n  <td>配合gdb进行调试</td>\n</tr>\n<tr>\n  <td>Pwnlib.memleak</td>\n  <td>用于内存泄漏，可拼接多次泄露出来的内存</td>\n</tr>\n<tr>\n  <td>Pwnlib.shellcraft</td>\n  <td>shellcode的生成器</td>\n</tr>\n<tr>\n  <td>Pwnlib.tubes</td>\n  <td>包括tubes.sock, tubes.process, Pwnlib.tubes.ssh, tubes.serialtube，分别适用于不同场景的PIPE</td>\n</tr>\n</tr>\n  <td>Pwnlib.utils</td>\n  <td>一些实用的小功能，例如CRC计算，cyclic pattern等</td>\n</tr>\n<tr>\n  <td>Pwnlib.rop</td>\n  <td>rop生成工具，可以直接生成32位rop</td>\n</tr>\n<tr>\n  <td> </td>\n  <td> </td>\n</tr>\n</table>\n\n\n\n\n\n\n\n<h3 id=\"0x04pwntools的简单使用\"><a href=\"#0x04pwntools的简单使用\" class=\"headerlink\" title=\"0x04pwntools的简单使用\"></a>0x04pwntools的简单使用</h3><h4 id=\"用于导入pwntools模块\"><a href=\"#用于导入pwntools模块\" class=\"headerlink\" title=\"用于导入pwntools模块\"></a>用于导入pwntools模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地:p = porcess(<span class=\"string\">&quot;./文件名&quot;</span>)</span><br><span class=\"line\">远程:p = remote(<span class=\"string\">&quot;地址&quot;</span>,端口)</span><br><span class=\"line\">关闭连接:close()  </span><br><span class=\"line\"><span class=\"comment\"># p是看个人的</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接收数据\"><a href=\"#接收数据\" class=\"headerlink\" title=\"接收数据\"></a>接收数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recv()</span><br><span class=\"line\">recvall()</span><br><span class=\"line\">recvline(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># recv()接收指定个字节</span></span><br><span class=\"line\"><span class=\"comment\"># recvall()会一直接收到文件EOF(文件结束符)</span></span><br><span class=\"line\"><span class=\"comment\"># recvline()接收到指定数据结束</span></span><br></pre></td></tr></table></figure>\n<p>asm()函数接收一个字符串为参数，得到汇编码的机器代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm(shellcraft.sh)</span><br></pre></td></tr></table></figure>\n<p>shellcraft模块是shellcode的模块，包含一些生成shellcode的函数<br>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &gt;&gt;&gt;asm(<span class=\"string\">&#x27;mov eax, 0&#x27;</span>)</span><br><span class=\"line\">2. <span class=\"string\">&#x27;\\xb8\\x00\\x00\\x00\\x00&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Context设置\"><a href=\"#Context设置\" class=\"headerlink\" title=\"Context设置\"></a>Context设置</h4><p><strong>context</strong>是pwntools用来设置环境的功能。一些二进制文件的情况不同，设置环境来正常运行exp，例如一些时候需要进行汇编，32位汇编和64位汇编不同，若不设置context可能会导致一些问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>, arch=<span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>1.os是设置系统为Linux系统<br>2.arch是设置架构为amd64，可以简单的认为设置为64位的模式，32位对应’i386’<br>3.log_level设置<strong>日志输出等级</strong>为debug，这句话在调试的时候一般会设置，这样pwntools会将完整的io过程都打印下来，使得调试更加方便，可以避免在完成CTF题目时出现一些和IO相关的错误<br><strong>补充：</strong><br>1.日志输出等级由高到低：debug&lt;info&lt;error&lt;fatal<br>2.<br>info 用于打印程序应该出现的正常状态信息，便于追踪定位<br>warn 表明系统出现一些轻微错误，但不影响运行和使用<br>error 表面出现了系统错误和异常，无法正常完成目标操作</p>\n<h4 id=\"数据打包\"><a href=\"#数据打包\" class=\"headerlink\" title=\"数据打包\"></a>数据打包</h4><p>p32/p64:打包一个整数，分别为32位或64位<br>u32/u64:解包一个字符串，得到整数<br>p-&gt;pack 打包<br>u-&gt;unpack 解包 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = p32(0xabcdefgh)</span><br><span class=\"line\"><span class=\"comment\"># 打包一个32位的整数</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数据输出\"><a href=\"#数据输出\" class=\"headerlink\" title=\"数据输出\"></a>数据输出</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">some_str = <span class=\"string\">&quot;Hello_world&quot;</span></span><br><span class=\"line\">log.info(some_str)</span><br></pre></td></tr></table></figure>\n<p>info位log等级，Logger就是日志记录器</p>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_46436680/article/details/105784528\">https://blog.csdn.net/weixin_46436680/article/details/105784528</a><br><a href=\"http://brieflyx.me/2015/python-module/pwntools-intro/\">http://brieflyx.me/2015/python-module/pwntools-intro/</a><br><a href=\"https://www.jianshu.com/p/8d6b605eb7fc\">https://www.jianshu.com/p/8d6b605eb7fc</a><br><a href=\"https://blog.csdn.net/qq_29343201/article/details/51337025?utm_source=app\">https://blog.csdn.net/qq_29343201/article/details/51337025?utm_source=app</a></p>\n","categories":["学习历程"],"tags":[]},{"title":"Hello World","url":"https://kongzhou.net/2020/11/08/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"link","url":"https://kongzhou.net/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: m0re<br>info:<br>url: <a href=\"https://zxcv0221.github.io/\">https://zxcv0221.github.io/</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"search","url":"https://kongzhou.net/search/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://kongzhou.net/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://kongzhou.net/tag/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://kongzhou.net/about/index.html","content":"","categories":[],"tags":[]}]